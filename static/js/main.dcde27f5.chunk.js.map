{"version":3,"sources":["api.ts","types/SelectFilter.ts","components/TodoEach/TodoEach.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","utils/debounce.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SelectFilter","TodoEach","todo","handleChosenTodo","chosenTodo","completed","id","title","className","classNames","type","onClick","TodoList","React","memo","todos","map","TodoFilter","filterType","setFilterType","query","setQuery","applyQuery","cleanQuery","value","onChange","target","placeholder","e","style","pointerEvents","Loader","TodoModal","useState","loader","setLoader","modalUser","setModalUser","isLoadingError","setIsLoadingError","userId","useEffect","getUser","user","catch","finally","href","email","name","App","setTodos","isLoader","setIsLoader","setChosenTodo","All","appliedQuery","setAppliedQuery","Error","useCallback","arg","f","timerId","clearTimeout","args","debounce","visibleTodos","useMemo","filter","toLowerCase","includes","Completed","Active","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dcde27f5.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SelectFilter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  chosenTodo: Todo | null,\n  handleChosenTodo: (todo: Todo) => void,\n};\n\nexport const TodoEach: React.FC<Props> = ({\n  todo,\n  handleChosenTodo,\n  chosenTodo,\n}) => {\n  const { completed, id, title } = todo;\n\n  return (\n    <tr data-cy=\"todo\" className=\"\">\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames(\n          {\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          },\n        )}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            handleChosenTodo(todo);\n          }}\n        >\n          <span className=\"icon\">\n            <i className={classNames('far',\n              {\n                'far fa-eye': chosenTodo?.id !== id,\n                'fa-eye-slash': chosenTodo?.id === id,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { TodoEach } from '../TodoEach/TodoEach';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  chosenTodo: Todo | null,\n  handleChosenTodo: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  handleChosenTodo,\n  chosenTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <TodoEach\n            todo={todo}\n            chosenTodo={chosenTodo}\n            handleChosenTodo={handleChosenTodo}\n            key={todo.id}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import { SelectFilter } from '../../types/SelectFilter';\n\ntype Props = {\n  filterType: SelectFilter,\n  setFilterType: (filterType: SelectFilter) => void,\n  query: string,\n  setQuery: (e: string) => void,\n  applyQuery: (e: string) => void,\n  cleanQuery: (s: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  filterType,\n  setFilterType,\n  query,\n  setQuery,\n  applyQuery,\n  cleanQuery,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterType}\n          onChange={({ target }) => (\n            setFilterType(target.value as SelectFilter)\n          )}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(e) => {\n          setQuery(e.target.value);\n          applyQuery(e.target.value);\n        }}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query && (\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => {\n              cleanQuery('');\n              setQuery('');\n            }}\n            aria-label=\"Clear Search Button\"\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\n\ntype Props = {\n  chosenTodo: Todo,\n  handleChosenTodo: (arg: null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  chosenTodo,\n  handleChosenTodo,\n}) => {\n  const [loader, setLoader] = useState<boolean>(true);\n  const [modalUser, setModalUser] = useState<User | null>(null);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = chosenTodo;\n\n  useEffect(() => {\n    getUser(userId)\n      .then((user) => {\n        setModalUser(user);\n      })\n      .catch(() => setIsLoadingError(true))\n      .finally(() => setLoader(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loader ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => handleChosenTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              {modalUser && !isLoadingError\n                ? (\n                  <a href={`mailto:${modalUser.email}`}>\n                    {modalUser.name}\n                  </a>\n                ) : (\n                  <span>\n                    --  Error, something went wrong while loading user 😭  --\n                  </span>\n                )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n} from 'react';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { debounce } from './utils/debounce';\nimport { SelectFilter } from './types/SelectFilter';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[] | []>([]);\n  const [isLoader, setIsLoader] = useState(true);\n  const [chosenTodo, setChosenTodo] = useState<Todo | null>(null);\n  const [filterType, setFilterType] = useState(SelectFilter.All);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .catch(() => new Error('Sorry todos not found.'))\n      .finally(() => setIsLoader(false));\n  }, []);\n\n  const handleChosenTodo = useCallback((arg: null | Todo) => {\n    setChosenTodo(arg);\n  }, []);\n\n  const applyQuery = useCallback(debounce(setAppliedQuery, 1000), []);\n\n  const visibleTodos = useMemo(() => {\n    const filtered = todos.filter(todo => (\n      todo.title.toLowerCase().includes(appliedQuery.toLowerCase())\n    ));\n\n    return filtered.filter(todo => {\n      switch (filterType) {\n        case SelectFilter.Completed:\n          return todo.completed;\n\n        case SelectFilter.Active:\n          return !todo.completed;\n\n        default:\n          return todo;\n      }\n    });\n  }, [todos, filterType, appliedQuery]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterType={filterType}\n                setFilterType={setFilterType}\n                query={query}\n                setQuery={setQuery}\n                applyQuery={applyQuery}\n                cleanQuery={setAppliedQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoader && <Loader />}\n\n              {(!!todos.length) && (\n                <TodoList\n                  todos={visibleTodos}\n                  chosenTodo={chosenTodo}\n                  handleChosenTodo={handleChosenTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {\n        chosenTodo && (\n          <TodoModal chosenTodo={chosenTodo} handleChosenTodo={handleChosenTodo} />\n        )\n      }\n    </>\n  );\n};\n","export const debounce = (\n  f: React.Dispatch<React.SetStateAction<string>>,\n  delay: number,\n) => {\n  let timerId: number;\n\n  return (...args: string[]) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}